-- üîÑ Continuous Memory Optimizer
-- ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ character ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

task.wait(15) -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

print("üîÑ Starting Continuous Memory Optimizer...")

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
_G.shouldStopOptimizer = false
_G.optimizerRunning = true

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô optimize ‡πÅ‡∏ö‡∏ö lightweight
local function lightweightOptimize()
    local optimized = {
        textures = 0,
        meshes = 0,
        effects = 0,
        audio = 0
    }
    
    -- Optimize ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    for _, obj in pairs(workspace:GetDescendants()) do
        pcall(function()
            if obj:IsA("Texture") or obj:IsA("Decal") then
                if obj.Texture ~= "" then
                    obj.Texture = ""
                    optimized.textures = optimized.textures + 1
                end
            elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
                if obj.Image ~= "" then
                    obj.Image = ""
                    optimized.textures = optimized.textures + 1
                end
            elseif obj:IsA("SpecialMesh") then
                if obj.TextureId ~= "" then
                    obj.TextureId = ""
                    optimized.textures = optimized.textures + 1
                end
            elseif obj:IsA("MeshPart") then
                if obj.RenderFidelity ~= Enum.RenderFidelity.Performance then
                    obj.RenderFidelity = Enum.RenderFidelity.Performance
                    optimized.meshes = optimized.meshes + 1
                end
            elseif obj:IsA("ParticleEmitter") or obj:IsA("Beam") or obj:IsA("Trail") then
                if obj.Enabled then
                    obj.Enabled = false
                    optimized.effects = optimized.effects + 1
                end
            elseif obj:IsA("Sound") then
                if obj.Volume > 0 then
                    obj.Volume = 0
                    optimized.audio = optimized.audio + 1
                end
            end
        end)
    end
    
    -- Optimize PlayerGui ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
    pcall(function()
        for _, obj in pairs(game.Players.LocalPlayer.PlayerGui:GetDescendants()) do
            if obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
                if obj.Image ~= "" then
                    obj.Image = ""
                    optimized.textures = optimized.textures + 1
                end
            end
        end
    end)
    
    return optimized
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô optimize client settings
local function optimizeClientSettings()
    pcall(function()
        -- ‡∏õ‡∏¥‡∏î 3D Rendering
        game:GetService("RunService"):Set3dRenderingEnabled(false)
        
        -- ‡∏•‡∏î Graphics Quality
        if settings():FindFirstChild("Rendering") then
            local rendering = settings().Rendering
            if rendering:FindFirstChild("QualityLevel") then
                rendering.QualityLevel = Enum.QualityLevel.Level01
            end
        end
        
        -- ‡∏•‡∏î FPS
        if setfpscap then
            setfpscap(3)
        end
        
        -- ‡∏õ‡∏¥‡∏î Lighting
        local lighting = game:GetService("Lighting")
        lighting.GlobalShadows = false
        lighting.FogEnd = 50
        lighting.Brightness = 1
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
local function continuousOptimizer()
    local cycleCount = 0
    local totalOptimized = {
        textures = 0,
        meshes = 0,
        effects = 0,
        audio = 0
    }
    
    while not _G.shouldStopOptimizer do
        cycleCount = cycleCount + 1
        
        -- ‡∏ó‡∏≥ optimization
        local optimized = lightweightOptimize()
        
        -- ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        totalOptimized.textures = totalOptimized.textures + optimized.textures
        totalOptimized.meshes = totalOptimized.meshes + optimized.meshes
        totalOptimized.effects = totalOptimized.effects + optimized.effects
        totalOptimized.audio = totalOptimized.audio + optimized.audio
        
        -- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 10 ‡∏£‡∏≠‡∏ö
        if cycleCount % 10 == 0 then
            local memUsage = collectgarbage("count")
            print("üîÑ Cycle " .. cycleCount .. " | Memory: " .. math.floor(memUsage) .. "KB | " .. 
                  "Textures: " .. totalOptimized.textures .. " | " ..
                  "Meshes: " .. totalOptimized.meshes .. " | " ..
                  "Effects: " .. totalOptimized.effects)
        end
        
        -- Force garbage collection ‡∏ó‡∏∏‡∏Å 20 ‡∏£‡∏≠‡∏ö
        if cycleCount % 20 == 0 then
            collectgarbage("collect")
        end
        
        -- Re-optimize client settings ‡∏ó‡∏∏‡∏Å 50 ‡∏£‡∏≠‡∏ö
        if cycleCount % 50 == 0 then
            optimizeClientSettings()
        end
        
        -- ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        task.wait(3) -- ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    end
    
    _G.optimizerRunning = false
    print("üõë Continuous Optimizer stopped after " .. cycleCount .. " cycles")
    print("üìä Total optimized: Textures:" .. totalOptimized.textures .. 
          " Meshes:" .. totalOptimized.meshes ..
          " Effects:" .. totalOptimized.effects ..
          " Audio:" .. totalOptimized.audio)
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏° client optimization ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
optimizeClientSettings()

-- ‡πÄ‡∏£‡∏¥‡πà‡∏° continuous optimizer
task.spawn(continuousOptimizer)

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á control functions
_G.stopOptimizer = function()
    _G.shouldStopOptimizer = true
    print("üõë Stopping continuous optimizer...")
end

_G.startOptimizer = function()
    if _G.optimizerRunning then
        print("‚ö†Ô∏è Optimizer already running!")
        return
    end
    
    _G.shouldStopOptimizer = false
    _G.optimizerRunning = true
    print("üîÑ Restarting continuous optimizer...")
    task.spawn(continuousOptimizer)
end

_G.getOptimizerStatus = function()
    local memUsage = collectgarbage("count")
    local status = {
        running = _G.optimizerRunning,
        shouldStop = _G.shouldStopOptimizer,
        memoryUsage = math.floor(memUsage),
        memoryMB = math.floor(memUsage / 1024)
    }
    
    print("üìä Optimizer Status:")
    for key, value in pairs(status) do
        print("   " .. key .. ": " .. tostring(value))
    end
    
    return status
end

_G.forceOptimizeNow = function()
    print("‚ö° Force optimizing now...")
    local result = lightweightOptimize()
    optimizeClientSettings()
    collectgarbage("collect")
    
    print("‚úÖ Force optimization complete:")
    print("   Textures: " .. result.textures)
    print("   Meshes: " .. result.meshes)
    print("   Effects: " .. result.effects)
    print("   Audio: " .. result.audio)
    
    return result
end

-- ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô crash
task.spawn(function()
    while _G.optimizerRunning do
        task.wait(60) -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
        
        -- ‡∏ñ‡πâ‡∏≤ optimizer ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
        if not _G.shouldStopOptimizer and not _G.optimizerRunning then
            print("üîß Optimizer crashed, restarting...")
            _G.startOptimizer()
        end
    end
end)

print("üéØ Continuous Memory Optimizer started!")
print("üìù Commands:")
print("   _G.stopOptimizer() - Stop optimizer")
print("   _G.startOptimizer() - Start optimizer") 
print("   _G.getOptimizerStatus() - Check status")
print("   _G.forceOptimizeNow() - Force optimize immediately")
print("üîÑ Optimizer will run every 3 seconds continuously")
